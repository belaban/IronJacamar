<?xml version="1.0" encoding="UTF-8"?>

<deployment>

  <bean name="LoggingEnvironmentBean" class="com.arjuna.common.internal.util.logging.LoggingEnvironmentBean">
    <constructor factoryClass="com.arjuna.common.internal.util.logging.commonPropertyManager" factoryMethod="getLoggingEnvironmentBean"/>        
    <property name="loggingFactory">com.arjuna.common.internal.util.logging.jakarta.JakartaRelevelingLogFactory;com.arjuna.common.internal.util.logging.jakarta.Log4JLogger</property>
  </bean>

  <bean name="RecoveryEnvironmentBean" class="com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean">
    <constructor factoryClass="com.arjuna.ats.arjuna.common.recoveryPropertyManager" factoryMethod="getRecoveryEnvironmentBean"/>
    <property name="recoveryInetAddress">localhost</property>
    <property name="recoveryPort">4712</property>
    <property name="transactionStatusManagerInetAddress">localhost</property>
    <property name="transactionStatusManagerPort">4713</property>
    <property name="recoveryExtensions">
      <list elementClass="java.lang.String">
        <value>com.arjuna.ats.internal.arjuna.recovery.AtomicActionRecoveryModule</value>
        <value>com.arjuna.ats.internal.txoj.recovery.TORecoveryModule</value>
        <value>com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule</value>
      </list>
    </property>
    <property name="expiryScanners">
      <list elementClass="java.lang.String">
        <value>com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner</value>
      </list>
    </property>
    <property name="recoveryActivators">
      <null/>
    </property>
  </bean>

  <bean name="CoreEnvironmentBean" class="com.arjuna.ats.arjuna.common.CoreEnvironmentBean">
    <constructor factoryClass="com.arjuna.ats.arjuna.common.arjPropertyManager" factoryMethod="getCoreEnvironmentBean"/>
    <property name="socketProcessIdPort">0</property>
    <property name="nodeIdentifier">1</property>
    <property name="socketProcessIdMaxPorts">10</property>
  </bean>

  <bean name="CoordinatorEnvironmentBean" class="com.arjuna.ats.arjuna.common.CoordinatorEnvironmentBean">
    <constructor factoryClass="com.arjuna.ats.arjuna.common.arjPropertyManager" factoryMethod="getCoordinatorEnvironmentBean"/>
    <property name="enableStatistics">false</property>
    <property name="defaultTimeout">300</property>
  </bean>

  <bean name="ObjectStoreEnvironmentBean" class="com.arjuna.ats.arjuna.common.ObjectStoreEnvironmentBean">
    <constructor factoryClass="com.arjuna.ats.arjuna.common.arjPropertyManager" factoryMethod="getObjectStoreEnvironmentBean"/>
    <property name="objectStoreDir">${iron.jacamar.home}/tmp/tx-object-store</property>
  </bean>

  <bean name="ObjectStoreBrowserBean" class="com.arjuna.ats.arjuna.tools.osb.mbean.ObjStoreBean">
    <constructor factoryClass="com.arjuna.ats.arjuna.tools.osb.mbean.ObjStoreBean" factoryMethod="getObjectStoreBrowserBean"/>
    <depends>ObjectStoreEnvironmentBean</depends>
  </bean>

  <bean name="JTAEnvironmentBean" class="com.arjuna.ats.jta.common.JTAEnvironmentBean">
    <constructor factoryClass="com.arjuna.ats.jta.common.jtaPropertyManager" factoryMethod="getJTAEnvironmentBean"/>
    <property name="lastResourceOptimisationInterface">org.jboss.tm.LastResource</property>
    <property name="transactionManagerClassName">com.arjuna.ats.jbossatx.jta.TransactionManagerDelegate</property>
    <property name="userTransactionClassName">com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple</property>
    <property name="transactionSynchronizationRegistryClassName">com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionSynchronizationRegistryImple</property>
    <property name="xaRecoveryNodes">
      <list elementClass="java.lang.String">
        <value>1</value>
      </list>
    </property>
    <property name="xaResourceOrphanFilterClassNames">
      <list elementClass="java.lang.String">
        <value>com.arjuna.ats.internal.jta.recovery.arjunacore.JTATransactionLogXAResourceOrphanFilter</value>
        <value>com.arjuna.ats.internal.jta.recovery.arjunacore.JTANodeNameXAResourceOrphanFilter</value>
      </list>
    </property>
  </bean>

  <bean name="RecoveryManager" class="com.arjuna.ats.jbossatx.jta.RecoveryManagerService">
    <depends>LoggingEnvironmentBean</depends>
    <depends>RecoveryEnvironmentBean</depends>
  </bean>

  <bean name="XATerminator" class="com.arjuna.ats.internal.jbossatx.jta.jca.XATerminator"/>

  <bean name="TransactionSynchronizationRegistry" class="com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionSynchronizationRegistryImple"/>

  <bean name="TransactionManager" class="com.arjuna.ats.jbossatx.jta.TransactionManagerService">
    <property name="jbossXATerminator"><inject bean="XATerminator"/></property>
    <property name="transactionSynchronizationRegistry"><inject bean="TransactionSynchronizationRegistry"/></property>
    <depends>LoggingEnvironmentBean</depends>
    <depends>RecoveryEnvironmentBean</depends>
    <depends>CoreEnvironmentBean</depends>
    <depends>CoordinatorEnvironmentBean</depends>
    <depends>ObjectStoreEnvironmentBean</depends>
    <depends>JTAEnvironmentBean</depends>
    <depends>RecoveryManager</depends>
    <depends>TransactionManagerJNDIBinding</depends>
    <depends>TransactionSynchronizationRegistryJNDIBinding</depends>
    <depends>TransactionPropagationContextImporterJNDIBinding</depends>
    <depends>TransactionPropagationContextExporterJNDIBinding</depends>
  </bean>

  <bean name="TransactionStatistics" class="com.arjuna.ats.arjuna.coordinator.TxStats">
    <constructor factoryClass="com.arjuna.ats.arjuna.coordinator.TxStats" factoryMethod="getInstance"/>
  </bean>

  <bean name="TransactionManagerJNDIBinding" class="com.arjuna.ats.jta.utils.JNDIReferenceBindingBean">
    <property name="bindName">java:/TransactionManager</property>
    <property name="className">
      <inject bean="JTAEnvironmentBean" property="transactionManagerClassName"/>
    </property>
    <property name="factory">
      <inject bean="JTAEnvironmentBean" property="transactionManagerClassName"/>
    </property>

    <install method="bind"/>
    <uninstall method="unbind"/>

    <depends>NamingServer</depends>
  </bean>

  <bean name="TransactionSynchronizationRegistryJNDIBinding" class="com.arjuna.ats.jta.utils.JNDIReferenceBindingBean">
    <property name="bindName">java:/TransactionSynchronizationRegistry</property>
    <property name="className">
      <inject bean="JTAEnvironmentBean" property="transactionSynchronizationRegistryClassName"/>
    </property>
    <property name="factory">
      <inject bean="JTAEnvironmentBean" property="transactionSynchronizationRegistryClassName"/>
    </property>

    <install method="bind"/>
    <uninstall method="unbind"/>

    <depends>NamingServer</depends>
  </bean>

  <bean name="TransactionPropagationContextImporterJNDIBinding" class="com.arjuna.ats.jta.utils.JNDIReferenceBindingBean">
    <property name="bindName">java:/TransactionPropagationContextImporter</property>
    <property name="className">com.arjuna.ats.internal.jbossatx.jta.PropagationContextManager</property>
    <property name="factory">com.arjuna.ats.internal.jbossatx.jta.PropagationContextManager</property>

    <install method="bind"/>
    <uninstall method="unbind"/>

    <depends>NamingServer</depends>
  </bean>

  <bean name="TransactionPropagationContextExporterJNDIBinding" class="com.arjuna.ats.jta.utils.JNDIReferenceBindingBean">
    <property name="bindName">java:/TransactionPropagationContextExporter</property>
    <property name="className">com.arjuna.ats.internal.jbossatx.jta.PropagationContextManager</property>
    <property name="factory">com.arjuna.ats.internal.jbossatx.jta.PropagationContextManager</property>

    <install method="bind"/>
    <uninstall method="unbind"/>

    <depends>NamingServer</depends>
  </bean>

  <!-- Ensure TransactionPropagationContextUtil's ref to TransactionPropagationContextFactory is set. See JBAS-7784. -->
  <bean name="TransactionPropagationContextFactory" class="org.jboss.tm.TransactionPropagationContextFactory">
    <constructor factoryClass="org.jboss.tm.TransactionPropagationContextUtil" factoryMethod="getTPCFactory"/>
    <!--  The factory method looks up the JNDI binding, so we depend on it -->
    <depends>TransactionPropagationContextExporterJNDIBinding</depends>
  </bean>

  <!-- Make javax.transaction.TransactionManager available for injection -->
  <bean name="RealTransactionManager">
    <constructor factoryMethod="getTransactionManager">
      <factory bean="TransactionManager"/>
    </constructor>
  </bean>

  <!-- Handles user transaction providers and listeners -->
  <bean name="UserTransactionRegistry" class="org.jboss.tm.usertx.UserTransactionRegistry">
    <!-- Register providers -->
    <incallback method="addProvider"/>
    <uncallback method="removeProvider"/>

    <!-- Register listeners -->
    <incallback method="addListener"/>
    <uncallback method="removeListener"/>
  </bean>
  
  <!-- The provider for default in process UserTransactions -->
  <bean name="DefaultUserTransactionprovider" class="org.jboss.tm.usertx.client.ServerVMClientUserTransaction">
    <constructor factoryClass="org.jboss.tm.usertx.client.ServerVMClientUserTransaction" factoryMethod="getSingleton"/>
    <depends>TransactionManager</depends>
  </bean>
  
  <!-- Bind java:/UserTransaction -->
  <bean name="UserTransactionJNDIBinding" class="com.arjuna.ats.jta.utils.JNDIReferenceBindingBean">
    <property name="bindName">java:/UserTransaction</property>
    <property name="className">
      <inject bean="JTAEnvironmentBean" property="userTransactionClassName"/>
    </property>
    <property name="factory">
      <inject bean="JTAEnvironmentBean" property="userTransactionClassName"/>
    </property>

    <install method="bind"/>
    <uninstall method="unbind"/>

    <depends>NamingServer</depends>
  </bean>
  
</deployment>
