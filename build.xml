<!--
 * JBoss, Home of Professional Open Source.
 * Copyright 2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<project name="jboss-jca" 
         default="jars" 
         basedir="." 
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <available classname="java.lang.Enum" property="HAVE_JDK_1.5"/>
  <available classname="java.lang.management.LockInfo" property="HAVE_JDK_1.6"/>

  <!-- ================================= 
       Repositories              
       ================================= -->
  <property name="central.repo" value="http://repo1.maven.org/maven2"/>
  <property name="jboss.repo" value="http://repository.jboss.org/maven2"/>
  <property name="snapshots.repo" value="http://snapshots.jboss.org/maven2"/>
  
  <!-- ================================= 
       Properties              
       ================================= -->
  <property name="lib.dir" value="${basedir}/lib" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="target.dir" value="${basedir}/target" />
  <property name="tools.dir" value="${basedir}/tools" />
  <property name="reports.dir" value="${basedir}/reports" />
  <property name="test.dir" value="${reports.dir}" />

  <property name="javac.debug" value="on" />
  <property name="javac.deprecation" value="on" />
  <property name="javac.optimize" value="off" />

  <property name="junit.printsummary" value="yes" />
  <property name="junit.haltonerror" value="no" />
  <property name="junit.haltonfailure" value="no" />
  <property name="junit.fork" value="yes" />
  <property name="junit.timeout" value="60000" />
  <property name="junit.jvm" value="" />
  <property name="junit.jvm.options" value="-Xms128m -Xmx512m -XX:MaxPermSize=256m" />
  <property name="junit.batchtest.haltonerror" value="no" />
  <property name="junit.batchtest.haltonfailure" value="no" />
  <property name="junit.batchtest.fork" value="yes" />

  <!-- ================================= 
       Versions              
       ================================= -->
  <property name="version.apache-log4j" value="1.2.14"/>
  <property name="version.apache-logging" value="1.1.0.jboss"/>
  <property name="version.apache-xerces" value="2.9.1"/>
  <property name="version.easymock" value="2.4"/>
  <property name="version.javassist" value="3.10.0.GA"/>
  <property name="version.jaxb.api" value="2.0"/>
  <property name="version.jaxb.impl" value="2.1"/>
  <property name="version.jboss.aop" value="2.1.0.CR3"/>
  <property name="version.jboss.bootstrap" value="1.0.0-Beta-3"/>
  <property name="version.jboss.classloading" value="2.2.0.M4"/>
  <property name="version.jboss.common" value="2.2.13.GA"/>
  <property name="version.jboss.deployers" value="2.2.0.M2"/>
  <property name="version.jboss.ejb3.test" value="1.0.0"/>
  <property name="version.jboss.integration" value="5.1.0.CR1"/>
  <property name="version.jboss.logbridge" value="1.0.0.CR4"/>
  <property name="version.jboss.logging" value="2.0.5.GA"/>
  <property name="version.jboss.logging.log4j" value="2.0.6.GA"/>
  <property name="version.jboss.logmanager" value="1.0.0.CR3"/>
  <property name="version.jboss.managed" value="2.1.0.CR7"/>
  <property name="version.jboss.mc.aop-int" value="2.2.0.M1"/>
  <property name="version.jboss.mc.dependency" value="2.2.0.M1"/>
  <property name="version.jboss.mc.kernel" value="2.2.0.M1"/>
  <property name="version.jboss.mdr" value="2.0.1.GA"/>
  <property name="version.jboss.metadata" value="1.0.0.CR18"/>
  <property name="version.jboss.naming" value="5.0.1.GA"/>
  <property name="version.jboss.reflect" value="2.0.2.GA"/>
  <property name="version.jboss.ts" value="4.4.0.GA"/>
  <property name="version.jboss.vfs" value="2.2.0.M4"/>
  <property name="version.jboss.xb" value="2.0.1.CR2"/>
  <property name="version.junit" value="4.5"/>
  <property name="version.transaction.api" value="1.0.1.GA"/>
  <property name="version.trove" value="2.1.1"/>

  <!-- ================================= 
       Paths              
       ================================= -->
  <path id="standalone.lib.path.id">
    <fileset dir="${lib.dir}/standalone">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${target.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="test.lib.path.id">
    <fileset dir="${lib.dir}/test">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${target.dir}">
       <include name="**/*.jar"/>
    </fileset>
 </path>

  <path id="checkstyle.lib.path.id">
    <fileset dir="${tools.dir}/checkstyle/lib"/>
    <fileset dir="${target.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="findbugs.lib.path.id">
    <fileset dir="${tools.dir}/findbugs/lib"/>
  </path>

  <path id="cobertura.lib.path.id">
    <fileset dir="${tools.dir}/cobertura/lib"/>
  </path>

  <!-- ================================= 
       Target: init              
       ================================= -->
  <target name="init">
    <ivy:settings file="${basedir}/ivy.settings.xml"/>

    <mkdir dir="${build.dir}" />
    <mkdir dir="${target.dir}" />
  </target>

  <!-- ================================= 
       Target: resolve              
       ================================= -->
  <target name="resolve" depends="init">
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" sync="true"/>
  </target>
  
  <!-- ================================= 
       Target: report              
       ================================= -->
  <target name="report" depends="resolve">
    <ivy:report todir="${target.dir}"/>
  </target>
  
  <!-- ================================= 
       Target: jars
       ================================= -->
  <target name="jars" depends="resolve">
    <ant dir="api" inheritRefs="true" target="jars"/>
    <ant dir="common" inheritRefs="true" target="jars"/>
    <ant dir="core" inheritRefs="true" target="jars"/>
    <ant dir="standalone" inheritRefs="true" target="jars"/>
  </target>
  
  <!-- ================================= 
       Target: docs
       ================================= -->
  <target name="docs" depends="jars">
    <ant dir="api" inheritRefs="true" target="docs"/>
    <ant dir="common" inheritRefs="true" target="docs"/>
    <ant dir="core" inheritRefs="true" target="docs"/>
    <ant dir="standalone" inheritRefs="true" target="docs"/>
  </target>
  
  <!-- ================================= 
       Target: prepare test
       ================================= -->
  <target name="prepare-test" depends="jars">
    <ant dir="core" inheritRefs="true" target="prepare-test"/>
  </target>
  
  <!-- ================================= 
       Target: test
       ================================= -->
  <target name="test" depends="prepare-test">
    <ant dir="core" inheritRefs="true" target="test"/>
  </target>
  
  <!-- ================================= 
       Target: one-test
       ================================= -->
  <target name="one-test" depends="jars">
    <ant dir="core" inheritRefs="true" target="one-test"/>
  </target>

  <!-- ================================= 
       Target: standalone
       ================================= -->
  <target name="standalone" depends="jars">
    <ant dir="standalone" inheritRefs="true" target="standalone"/>
  </target>

  <!-- ================================= 
       Target: checkstyle
       ================================= -->
  <target name="checkstyle" depends="jars">
    <taskdef name="checkstyle"
             classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
             classpathref="checkstyle.lib.path.id"/>

    <mkdir dir="${reports.dir}/checkstyle" />

    <checkstyle config="${tools.dir}/checkstyle/checkstyle.xml"
                failOnViolation="false"
                classpathref="checkstyle.lib.path.id">
      <fileset dir="${basedir}"
               includes="**/*.java"/>
      <formatter type="plain"/>
      <formatter type="xml" toFile="${reports.dir}/checkstyle/checkstyle-result.xml"/>
    </checkstyle>
  </target>

  <!-- ================================= 
       Target: findbugs
       ================================= -->
  <target name="findbugs" depends="jars">
    <taskdef name="findbugs"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             classpathref="findbugs.lib.path.id"/>

    <mkdir dir="${reports.dir}/findbugs" />

    <findbugs home="${basedir}/tools/findbugs/lib/"
              output="xml:withMessages"
              outputFile="${reports.dir}/findbugs/findbugs.xml" 
              excludeFilter="${basedir}/tools/findbugs/filter.xml">
      <auxClasspath>
        <fileset dir="${lib.dir}/standalone">
          <include name="*.jar"/>
        </fileset>
      </auxClasspath>
      <class location="${target.dir}/javax-resource-spec-api.jar" />
      <class location="${target.dir}/jboss-jca-common-api.jar" />
      <class location="${target.dir}/jboss-jca-common-impl.jar" />
      <class location="${target.dir}/jboss-jca-core-api.jar" />
      <class location="${target.dir}/jboss-jca-core-impl.jar" />
      <class location="${target.dir}/jboss-jca-standalone.jar" />
    </findbugs>
  </target>

  <!-- ================================= 
       Target: cobertura
       ================================= -->
  <target name="cobertura" depends="prepare-test">
    <taskdef resource="tasks.properties"
             classpathref="cobertura.lib.path.id"/>

    <mkdir dir="${reports.dir}/cobertura" />
    <mkdir dir="${reports.dir}/cobertura/tests" />

    <delete file="${reports.dir}/cobertura/cobertura.ser"/>
    <delete dir="${build.dir}/instrumented"/>
    
    <mkdir dir="${build.dir}/instrumented" />
    <copy todir="${build.dir}/instrumented">
      <fileset dir="${target.dir}"/>
    </copy>

    <cobertura-instrument todir="${build.dir}/instrumented"
                          datafile="${reports.dir}/cobertura/cobertura.ser">
      <fileset dir="${target.dir}">
        <include name="*.jar" />
      </fileset>
    </cobertura-instrument>

    <junit dir="core/src/test"
           printsummary="${junit.printsummary}"
           haltonerror="${junit.haltonerror}"
           haltonfailure="${junit.haltonfailure}"
           fork="yes"
           timeout="${junit.timeout}">
      
      <jvmarg line="${junit.jvm.options}"/>
      <sysproperty key="test.dir" value="${test.dir}"/>
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${reports.dir}/cobertura/cobertura.ser" />
      <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>

      <classpath>
        <fileset dir="${build.dir}/instrumented" includes="*.jar" />
        <pathelement location="${build.dir}/core/test"/>
        <fileset dir="${lib.dir}/test" includes="*.jar" />
      </classpath>
      <classpath refid="cobertura.lib.path.id" />
      
      <formatter type="xml"/>
      
      <batchtest todir="${reports.dir}/cobertura/tests">
        <fileset dir="${build.dir}/core/test">
          <include name="**/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>

    <cobertura-report format="html" 
                      destdir="${reports.dir}/cobertura/html" 
                      datafile="${reports.dir}/cobertura/cobertura.ser">
      <fileset dir="api/src/main/java">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="common/src/main/java">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="core/src/main/java">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>

    <cobertura-report format="xml" 
                      destdir="${reports.dir}/cobertura/xml" 
                      datafile="${reports.dir}/cobertura/cobertura.ser">
      <fileset dir="api/src/main/java">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="common/src/main/java">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="core/src/main/java">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>

  <!-- ================================= 
       Target: clean              
       ================================= -->
  <target name="clean">
    <delete>
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="**/*~"/>
        <include name="**/*.bak"/>
      </fileset>
    </delete>
    <delete>
      <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </delete>
    <delete dir="${build.dir}"/>
    <delete dir="${target.dir}"/>
    <delete dir="${reports.dir}"/>
  </target>
  
  <!-- ================================= 
       Target: clean-cache              
       ================================= -->
  <target name="clean-cache">
    <ivy:cleancache />
  </target>

</project>
