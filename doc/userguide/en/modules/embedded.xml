<?xml version="1.0" encoding="UTF-8"?>
<chapter id="embedded">
   <title>Embedded</title>

   <section id="embedded_overview">
      <title>Overview</title>

      <para>The JBoss JCA embedded configuration provides a way of running a JCA container
        in-VM.</para>

      <para>The configuration is useful when you want a</para>

      <itemizedlist spacing="compact">
        <listitem>
          JCA container within your environment
        </listitem>
        <listitem>
          JCA container when doing unit testing
        </listitem>
      </itemizedlist>

      <para>Especially the ability to unit test your resource adapter archives before deploying them
        into a testing or a production environment will benefit developers.</para>

   </section>

   <section id="embedded_deployment">
      <title>Deployment</title>

      <para>Current you will need all the JAR files located in the</para>

      <programlisting>
$JBOSS_JCA_HOME/lib
      </programlisting>

      <para>directory as well as sub-directories on your application class loader - f.ex.</para>

      <programlisting>
java -classpath allthejarfiles.jar yourapp
      </programlisting>

      <para>in order to use the embedded configuration.</para>

   </section>

   <section id="embedded_usage">
      <title>Usage</title>

      <para>JBoss JCA Embedded supports both a simple and an advanced usage model, using pre-assembled
        resource adapter archives (.rar) or dynamic resource adapter archives based on ShrinkWrap.</para>

      <section id="embedded_usage_simple">
        <title>Simple usage</title>

        <para>The code sample below shows a simple usage of deploying a pre-assembled resource adapter archive
          into the JBoss JCA Embedded environment.</para>

        <programlisting>
import org.jboss.jca.embedded.EmbeddedJCA;

import java.net.URL;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

public class MyTestCase
{
   /* Embedded */
   private static EmbeddedJCA embedded;

   /**
    * Simple test to verify deployment of myresourceadapter.rar
    * @throws Throwable throwable exception 
    */
   @Test
   public void testDeployment() throws Throwable
   {
      URL archive = getURL("myresourceadapter.rar");
 
      try
      {
         embedded.deploy(archive);
      }
      catch (Throwable t)
      {
         fail(t.getMessage());
      }
      finally
      {
         embedded.undeploy(archive);
      }
   }

   @BeforeClass
   public static void beforeClass() throws Throwable
   {
      // Create an embedded JCA instance
      embedded = new EmbeddedJCA();

      // Startup
      embedded.startup();
   }

   @AfterClass
   public static void afterClass() throws Throwable
   {
      // Shutdown
      embedded.shutdown();
   }
}
        </programlisting>

        <callout>
          <note>Note that, the url for the archive must end with the <code>.rar</code> extension
            - either representing a file or a directory.</note>
        </callout>

        <para>See the JBoss JCA Embedded API documentation for additional functionality.</para>

      </section>

      <section id="embedded_usage_advanced">
        <title>Advanced usage</title>

        <para>The code sample below shows an advanced usage of deploying a dynamic ShrinkWrap resource adapter archive
          into the JBoss JCA Embedded environment.</para>

        <programlisting>
<![CDATA[
import org.jboss.jca.embedded.EmbeddedJCA;
import org.jboss.jca.test.embedded.rars.simple.MessageListener;
import org.jboss.jca.test.embedded.rars.simple.TestActivationSpec;
import org.jboss.jca.test.embedded.rars.simple.TestConnection;
import org.jboss.jca.test.embedded.rars.simple.TestConnectionInterface;
import org.jboss.jca.test.embedded.rars.simple.TestManagedConnection;
import org.jboss.jca.test.embedded.rars.simple.TestManagedConnectionFactory;
import org.jboss.jca.test.embedded.rars.simple.TestResourceAdapter;

import java.util.UUID;

import org.jboss.logging.Logger;
import org.jboss.shrinkwrap.api.Archives;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.jboss.shrinkwrap.api.spec.ResourceAdapterArchive;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

public class ShrinkWrapTestCase
{
   private static Logger log = Logger.getLogger(ShrinkWrapTestCase.class);

   /*
    * Embedded
    */
   private static EmbeddedJCA embedded;

   /**
    * Basic ShrinkWrap ResourceAdapterArchive test case
    * @exception Throwable Thrown if case of an error
    */
   @Test
   public void testBasic() throws Throwable
   {
      ResourceAdapterArchive raa =
         Archives.create(UUID.randomUUID().toString() + ".rar", 
                         ResourceAdapterArchive.class);

      JavaArchive ja = 
         Archives.create(UUID.randomUUID().toString() + ".jar", JavaArchive.class);

      ja.addClasses(MessageListener.class, TestActivationSpec.class, 
                    TestConnection.class, TestConnectionInterface.class, 
                    TestManagedConnection.class, TestManagedConnectionFactory.class,
                    TestResourceAdapter.class);

      raa.addLibrary(ja);
      raa.addManifestResource("simple.rar/META-INF/ra.xml", "ra.xml");

      try
      {
         embedded.deploy(raa);
      }
      catch (Throwable t)
      {
         log.error(t.getMessage(), t);
         fail(t.getMessage());
      }
      finally
      {
         embedded.undeploy(raa);
      }
   }

   /**
    * Lifecycle start, before the suite is executed
    * @exception Throwable Thrown if case of an error
    */
   @BeforeClass
   public static void beforeClass() throws Throwable
   {
      // Create and set an embedded JCA instance
      embedded = new EmbeddedJCA();

      // Startup
      embedded.startup();
   }

   /**
    * Lifecycle stop, after the suite is executed
    * @exception Throwable Thrown if case of an error
    */
   @AfterClass
   public static void afterClass() throws Throwable
   {
      // Shutdown embedded
      embedded.shutdown();

      // Set embedded to null
      embedded = null;
   }
}
]]>
        </programlisting>

        <callout>
          <note>Note that, the name for the <code>ResourceAdapterArchive</code> must end with the
            <code>.rar</code> extension.</note>
        </callout>

        <para>See the <ulink url="http://www.jboss.org/community/wiki/ShrinkWrap">
          ShrinkWrap</ulink> web site for a full description of the project and additional documentation.</para>

      </section>

   </section>


</chapter>
